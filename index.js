import Groq from "groq-sdk";
import { z } from "zod";
const groq = new Groq({
  apiKey: process.env.GROQ_KEY,
});

const emotionOutput = z.object({
  emotion: z.string(),
  scale: z.number(),
});

export async function main() {
  const chatCompletion = await getGroqChatCompletion();
  // Print the completion returned by the LLM.
  // console.log(chatCompletion.choices[0].message.content || "");
  const rawResult = JSON.parse(
    chatCompletion.choices[0].message.content || "{}"
  );
  const result = emotionOutput.parse(rawResult);
  console.log(result);
}

export async function getGroqChatCompletion() {
  return groq.chat.completions.create({
    // response_format: { type: "json_object" },

    response_format: {
      type: "json_schema",
      json_schema: {
        name: "emotion_scaler",
        schema: z.toJSONSchema(emotionOutput),
      },
    },

    temperature: 1, // this sets the randomness of the output generated by LLM [0,2]
    // stop : "Revamp", The output will be stopped if if encounters the word Revamp
    // max_completion_tokens : 1000, this will limit the LLM output to 1000 tokens
    messages: [
      {
        role: "system",
        content: `You are a emotion detector software, given a sentence, you will tell the emotion behind it and the scale (out of 10) of that emotion in JSON.
          For example : Input : I was so joyed today.
                        Output : {
                          "emotion" : "happy",
                          "scale" : 9
                        }
          `,
      },
      {
        role: "user",
        content:
          "Today the work at office was so hectic, I don't have any energy left in me.",
      },
    ],
    // model: "llama-3.3-70b-versatile",
    model: "moonshotai/kimi-k2-instruct",
  });
}
main();
